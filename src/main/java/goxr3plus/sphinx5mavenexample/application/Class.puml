@startuml
class MainGame {
  - TextToSpeech tts
  - LetterRecognition letterRecognition
  - JLabel wordLabel
  - JTextField inputField
  - JButton startButton
  - JButton answerButton
  - JButton replayButton
  - String currentWord
  - List<String> wordList

  + MainGame()
  + actionPerformed(ActionEvent e)
  + startGame()
  + onLetterRecognized(String recognizedLetter)
}

class SpellingBeeUI {
  - TextToSpeech tts
  - JButton startButton
  - JLabel titleLabel
  - JLabel subtitleLabel

  + SpellingBeeUI()
  + startGame()
}

class TextToSpeech {
  - MaryInterface marytts
  - AudioPlayer tts

  + TextToSpeech()
  + speak(String text, float gainValue, boolean daemon, boolean join)
  + stopSpeaking()
  + getAvailableVoices()
  + getMarytts()
  + getAudioEffects()
  + setVoice(String voice)
}

class AudioPlayer {
  - AudioInputStream ais
  - LineListener lineListener
  - SourceDataLine line
  - int outputMode
  - Status status
  - boolean exitRequested
  - float gain

  + AudioPlayer()
  + setAudio(AudioInputStream audio)
  + cancel()
  + getLine()
  + getGainValue()
  + setGain(float fGain)
  + run()
}

class LetterRecognition {
  - LetterRecognitionCallback callback
  - LiveSpeechRecognizer recognizer
  - Logger logger
  - boolean ignoreSpeechRecognitionResults
  - boolean speechRecognizerThreadRunning
  - ExecutorService eventsExecutorService
  - List<String> recognizedLetters

  + LetterRecognition()
  + setLetterRecognitionCallback(LetterRecognitionCallback callback)
  + startSpeechRecognition(int delayMilliseconds)
  + stopSpeechRecognition()
  + ignoreSpeechRecognitionResults()
  + stopIgnoreSpeechRecognitionResults()
  + stopRecognition()
  + confirmInput(String letter)
}
JFrame --> MainGame
MainGame --> TextToSpeech
MainGame --> LetterRecognition
SpellingBeeUI --> TextToSpeech
TextToSpeech --> MaryInterface
TextToSpeech --> AudioPlayer
AudioPlayer --> SourceDataLine
LetterRecognition --> LiveSpeechRecognizer
LetterRecognition --> ExecutorService
@enduml
